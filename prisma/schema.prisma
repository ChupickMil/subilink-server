generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RolesInChat {
  creator
  admin
  user
}

enum Themes {
  system
  light
  dark
}

enum Fonts {
  roboto
}

enum FriendStatuses {
  pending
  confirmed
  blocked
}

model User {
  id          Int      @id @unique @default(autoincrement())
  phone       String   @unique
  name        String?
  description String?
  password    String?
  avatar_uuid String   @default("d6aa3966-c589-4c17-af88-d86735236a97")
  last_visit  DateTime @default(now())
  createAt    DateTime @default(now()) @map("created_at")
  updateAt    DateTime @updatedAt @map("update_at")

  views View[]

  twofa            TwoFA?
  settings         Setting?
  group            Group?
  Message          Message[]
  File             File[]
  chat_participant Chat_participant?
  followedFriends  Friend[]          @relation("FollowedRelation")
  followerFriends  Friend[]          @relation("FollowerRelation")
  chatFirstUser    Chat[]            @relation("FirstUser")
  chatSecondUser   Chat[]            @relation("SecondUser")
  Visits           Visit[]
  shakeFirstUser   Shake[]           @relation("first_user")
  shakeSecondUser  Shake[]           @relation("second_user")

  @@map("user")
}

model TwoFA {
  id                  Int     @id @unique @default(autoincrement())
  user_id             Int     @unique
  email               String? @unique
  oauth               String? @unique
  autentificator_code String?

  user User @relation(fields: [user_id], references: [id])

  @@map("twofa")
}

model Setting {
  id        Int    @id @unique @default(autoincrement())
  user_id   Int    @unique
  theme     Themes
  font      Fonts
  font_size Int

  user User @relation(fields: [user_id], references: [id])

  @@map("setting")
}

model Chat {
  id          Int       @id @unique @default(autoincrement())
  first_user  Int
  second_user Int
  created_at  DateTime  @default(now()) @map("created_at")
  delete_for  Int[]
  deleted_at  DateTime?

  Message     Message[]
  user        User      @relation("FirstUser", fields: [first_user], references: [id])
  user_second User      @relation("SecondUser", fields: [second_user], references: [id])

  @@map("chat")
}

model Group {
  id         Int    @id @unique @default(autoincrement())
  name       String
  creator_id Int    @unique

  Message Message[]

  user             User              @relation(fields: [creator_id], references: [id])
  Chat_participant Chat_participant?

  @@map("group")
}

model Message {
  id         Int       @id @default(autoincrement())
  sender_id  Int
  chat_id    Int?
  group_id   Int?
  read_at    DateTime?
  content    String?
  reply_id   Int?
  deleted_at DateTime?
  send_at    DateTime  @default(now())
  created_at DateTime  @default(now()) @map("created_at")
  delete_for Int[]
  file_ids   String[]

  files File[]
  user  User   @relation(fields: [sender_id], references: [id])
  chat  Chat?  @relation(fields: [chat_id], references: [id])
  group Group? @relation(fields: [group_id], references: [id])

  @@map("message")
}

model Chat_participant {
  id        Int         @id @unique @default(autoincrement())
  group_id  Int         @unique
  user_id   Int         @unique
  joined_at DateTime
  role      RolesInChat

  user  User  @relation(fields: [user_id], references: [id])
  group Group @relation(fields: [group_id], references: [id])

  @@map("chat_participant")
}

model Friend {
  id          Int            @id @unique @default(autoincrement())
  follower_id Int
  followed_id Int
  created_at  DateTime       @default(now())
  status      FriendStatuses @default(pending)

  followed User @relation(fields: [followed_id], references: [id], name: "FollowedRelation")
  follower User @relation(fields: [follower_id], references: [id], name: "FollowerRelation")

  @@map("friend")
}

model File {
  id            Int     @id @unique @default(autoincrement())
  uuid          String  @unique
  path          String
  original_name String
  mime_type     String
  size          Int
  type          String
  user_id       Int
  is_in_profile Boolean @default(false)

  user    User      @relation(fields: [user_id], references: [id])
  Message Message[]

  @@map("file")
}

model Visit {
  id         Int      @id @unique @default(autoincrement())
  user_id    Int
  session_id String
  ip_address String?
  user_agent String?
  is_active  Boolean
  created_at DateTime @default(now()) @map("created_at")

  user User @relation(fields: [user_id], references: [id])

  @@map("visit")
}

model View {
  id        Int      @id @unique @default(autoincrement())
  user_id   Int
  guest_id  Int
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [user_id], references: [id])

  @@map("view")
}

model Shake {
  id          Int      @id @unique @default(autoincrement())
  first_user  Int
  second_user Int
  created_at  DateTime @default(now()) @map("created_at")

  user        User @relation("first_user", fields: [first_user], references: [id])
  user_second User @relation("second_user", fields: [second_user], references: [id])

  @@map("shake")
}
